// Generated by LiveScript 1.2.0
(function(){
  var prelude, ref$, Obj, map, filter, each, find, fold, foldr, fold1, all, flatten, sum, groupBy, objToPairs, partition, join, unique, sortBy, reverse, take, id, mean, formatDate, pow, pow2, sqrt, floor, random, round, sample, conversion, margin, width, height;
  prelude = require('prelude-ls');
  ref$ = require('prelude-ls'), Obj = ref$.Obj, map = ref$.map, filter = ref$.filter, each = ref$.each, find = ref$.find, fold = ref$.fold, foldr = ref$.foldr, fold1 = ref$.fold1, all = ref$.all, flatten = ref$.flatten, sum = ref$.sum, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, partition = ref$.partition, join = ref$.join, unique = ref$.unique, sortBy = ref$.sortBy, reverse = ref$.reverse, take = ref$.take, id = ref$.id, mean = ref$.mean;
  formatDate = d3.time.format('%Y-%m-%d');
  pow = Math.pow;
  pow2 = function(n){
    return Math.pow(n, 2);
  };
  sqrt = Math.sqrt;
  floor = Math.floor;
  random = Math.random;
  round = Math.round;
  sample = curry$(function(size, ds){
    var i;
    return map(function(it){
      return ds[it];
    })((function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
        i = ref$[i$];
        results$.push(floor(random() * ds.length));
      }
      return results$;
      function fn$(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = size; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
    }()));
  });
  conversion = function(ds){
    return function(){
      return (function(it){
        return it / ds.length;
      })(function(it){
        return it.length;
      }(filter(function(it){
        return it;
      }).apply(this, arguments)));
    }(ds);
  };
  margin = {
    top: 10,
    right: 30,
    bottom: 30,
    left: 80
  };
  width = 960 - margin.left - margin.right;
  height = 500 - margin.top - margin.bottom;
  d3.csv('public/uae.csv', function(raw){
    var rdata, res$, i$, len$, ref$, vid, subsribed, conversionRate, $svg, $bars, addLine, render, renderInput, x$, $divEtner, setVal;
    res$ = [];
    for (i$ = 0, len$ = raw.length; i$ < len$; ++i$) {
      ref$ = raw[i$], vid = ref$.vid, subsribed = ref$.sid;
      res$.push(subsribed !== 'NULL');
    }
    rdata = res$;
    conversionRate = conversion(rdata);
    console.log(conversionRate);
    $svg = d3.select('.graph').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', "translate(" + margin.left + ", " + margin.top + ")");
    $svg.append('g').attr('class', 'x axis').attr('transform', "translate(0, " + height + ")");
    $svg.append('g').attr('class', 'y axis').attr('transform', "translate(0, 0)");
    $bars = $svg.append('g').attr('class', 'bars');
    addLine = function(className, color){
      return $svg.append('g').attr('class', className).append('rect').attr('width', 4).attr('x', -2).attr('height', function(){
        return height + margin.bottom;
      }).style({
        'fill': color,
        'opacity': 0.7
      });
    };
    addLine('mu', '#FD5823');
    addLine('ciRight', '#FFCC00');
    addLine('ciLeft', '#FFCC00');
    render = function(sampleSize, repeats, numberOfBins, xMax, callback){
      return new Parallel([rdata, sampleSize, repeats]).spawn(function(arg$){
        var input, size, repeats, floor, random, map, filter, conversion, sample, i$, ref$, len$, i, results$ = [];
        input = arg$[0], size = arg$[1], repeats = arg$[2];
        floor = Math.floor;
        random = Math.random;
        map = function(f, arr){
          return arr.map(f);
        };
        filter = function(f, arr){
          return arr.filter(f);
        };
        conversion = function(ds){
          var cs;
          cs = filter(function(it){
            return it;
          }, ds);
          return cs.length / ds.length;
        };
        sample = function(ds){
          var i;
          return map(function(it){
            return ds[it];
          }, (function(){
            var i$, ref$, len$, results$ = [];
            for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
              i = ref$[i$];
              results$.push(floor(random() * ds.length));
            }
            return results$;
            function fn$(){
              var i$, to$, results$ = [];
              for (i$ = 1, to$ = size; i$ <= to$; ++i$) {
                results$.push(i$);
              }
              return results$;
            }
          }()));
        };
        for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
          i = ref$[i$];
          results$.push(conversion(sample(input)));
        }
        return results$;
        function fn$(){
          var i$, to$, results$ = [];
          for (i$ = 1, to$ = repeats; i$ <= to$; ++i$) {
            results$.push(i$);
          }
          return results$;
        }
      }).then(function(sampled){
        var ci, x, data, y, $bar, $barEnter, xAxis, yAxis;
        ci = sqrt(conversionRate * (1 - conversionRate) / sampleSize);
        console.log('render', sampleSize, repeats, mean(sampled), ci);
        x = d3.scale.linear().domain([
          0, xMax != null
            ? xMax
            : d3.max(sampled)
        ]).range([0, width]);
        data = d3.layout.histogram().bins(x.ticks(numberOfBins))(sampled);
        y = d3.scale.linear().domain([
          0, d3.max(data, function(it){
            return it.y;
          })
        ]).range([height, 0]);
        $svg.select('g.mu').attr('transform', "translate(" + x(conversionRate) + ", " + (-margin.top) + ")");
        $svg.select('g.ciRight').attr('transform', "translate(" + x(conversionRate + ci) + ", " + (-margin.top) + ")");
        $svg.select('g.ciLeft').attr('transform', "translate(" + x(conversionRate - ci) + ", " + (-margin.top) + ")");
        $bar = $bars.selectAll('.bar').data(data);
        $barEnter = $bar.enter().append('g').attr('class', 'bar');
        $bar.exit().remove();
        $bar.transition().duration(500).attr('transform', function(it){
          return "translate(" + x(it.x) + ", " + y(it.y) + ")";
        });
        $barEnter.append('rect');
        $bar.select('rect').transition().duration(500).attr('x', 1).attr('width', x(data[0].dx) - 1).attr('height', function(it){
          return height - y(it.y);
        });
        $barEnter.append('text').attr('dy', '.75em').attr('y', 6).attr("text-anchor", "middle");
        $bar.select('text').attr('x', x(data[0].dx) / 2).text(function(it){
          return d3.format('%')(it.y / repeats);
        });
        xAxis = d3.svg.axis().scale(x).orient('bottom').tickFormat(d3.format('.2%'));
        $svg.selectAll('.x.axis').transition().duration(500).call(xAxis);
        yAxis = d3.svg.axis().scale(y).orient('left').tickFormat(function(it){
          return it + '%';
        });
        $svg.selectAll('.y.axis').transition().duration(500).call(yAxis);
        return callback();
      });
    };
    renderInput = function(callback){
      return render(parseInt($('footer input[data-value=sampleSize]').val()), parseInt($('footer input[data-value=repeats]').val()), parseInt($('footer input[data-value=numberOfBins]').val()), parseFloat($('footer input[data-value=xMax]').val() / 1000), callback);
    };
    x$ = $divEtner = d3.select('footer').selectAll('div').data(['sampleSize', 'repeats', 'numberOfBins', 'xMax']).enter().append('div');
    x$.append('label').attr('for', function(it){
      return it;
    }).text(function(it){
      return it;
    });
    x$.append('input').attr('type', 'range').attr('placeholder', function(it){
      return it;
    }).attr('data-value', function(it){
      return it;
    });
    x$.append('span').attr('class', 'value').attr('data-value', function(it){
      return it;
    });
    setVal = function($t, v, f){
      f == null && (f = id);
      $t.val(v);
      $t.attr('data-last', v);
      return $t.parent().find('span').text(f(v));
    };
    setVal($('footer input[data-value=sampleSize]').attr('min', raw.length * 0.0001).attr('max', raw.length * 0.01), raw.length * 0.001);
    setVal($('footer input[data-value=repeats]').attr('min', 10).attr('max', 5000), 100);
    setVal($('footer input[data-value=numberOfBins]').attr('min', 5).attr('max', 40), 20);
    setVal($('footer input[data-value=xMax]').attr('min', conversionRate * 1000).attr('max', conversionRate * 3 * 1000), conversionRate * 2 * 1000, function(){
      return (function(it){
        return it / 1000;
      })(round.apply(this, arguments));
    });
    $('footer input').on('change', $.throttle(500, false, function(){
      var $this, value;
      $this = $(this);
      value = $(this).val();
      $this.attr('data-last', value);
      $this.parent().find('span').text(value);
      return renderInput(function(_){});
    }));
    return renderInput(function(_){});
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
